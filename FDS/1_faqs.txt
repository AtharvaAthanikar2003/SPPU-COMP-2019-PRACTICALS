FAQS-
1) Write some real-life applications of an array.

Answer-
An array is a linear data structure which holds its elements at contiguous
memory locations.
Arrays can be used to store items in a tabular format. A to-do list or the
contacts on our phone can be stored linearly using arrays.
A music playlist is an array and the songs in the playlist are the elements
of the array.
Asset reports and stock analysis reports can be stored using matrices
which are 2-D arrays.
Hash tables which are used in cryptography can be made using arrays.
Queues are used in computer networks and a queue can be made by
using arrays.
2) What is the need to use an array?
Answer-
An array is used to store multiple elements under a single structure.
Suppose if we want to create a record of 1000 students for some tasks.
One way is to create 1000 variables and then storing whatever
information we want in those 1000 variables.
This task is quite time consuming and unnecessary when we have a data
structure for handling this operation.
We can directly create an array having a size of 1000 elements and then
store the required data in it.
Array also provides various operations which can be performed on its
elements.
Accessing and modifying the individual elements of the array is quite an
easy task.
SYNTAX- (ARRAY DECLARATION AND DEFINITION)
data_type array_name[size] = {elements of the array};

3) Analyse the need to use loops in programming.
Answer-
Consider a situation where we need to print “Hello” on the computer
screen 1000 times.
One way is to write the print statement 1000 times in the program and
then executing it.
But this task is quite time consuming and unnecessary when we have a
programming construct which does this task for us.
We can use loops for doing this task quite easily.

EXAMPLE-
for(int i = 0; i < 1000; i++)

{
cout << “Hello” << endl;
}
This loop will print “Hello” on the screen 1000 times and this task in
done in 4 lines of code whereas the first approach would have required
1000 lines of code.
There are two types of loops- entry controlled loops and exit controlled
loops.
The for loop and while loop are entry-controlled loops and the do-while
loop is an exit-controlled loop.
Loops contain an iteration variable which is checked for a condition and
if this condition holds true, the body of the loop is executed.

4) Elaborate the properties of Python language.
Answer-
1: Easy language- Python has a simple syntax and has an easy learning
curve as well. It is easy to understand and write as well.
2: Readable- Reading python code is like reading English. Python also
uses indentation instead of curly braces which makes the code more
readable and easier to understand.
3: Interpreted language- Python is an interpreted language. It comes
with the IDLE (Interactive Development Environment). This is an
interpreter and follows the REPL structure (Read-Evaluate-Print-Loop). It
executes and displays the output of one line at a time. So it displays
errors while you’re running a line and displays the entire stack trace for
the error.
4: Dynamically typed language- It means that we do not need to write
the data type of the variable when defining it. The interpreter
determines the data type of the variable.
5: Object oriented language- Python is object-oriented but supports
both functional and object-oriented programming. Everything in Python
is an object. It has the OOP (Object-oriented programming) concepts like
inheritance and polymorphism.
6: Open source- Python is open-source and the community is always
contributing to it to improve it. It is free and its source code is freely
available to the public.
7: Platform independent- Python is platform-independent. If you write a
program, it will run on different platforms like Windows, Mac and Linux.
You don’t need to write them separately for each platform.
8: High level language: Python is a high-level language and C++ is mid-
level. It is easy to understand and closer to the user. You don’t need to
remember system architecture or manage the memory.

5) Justify the use of flag in your program?
Answer-
Flag variable is used as a signal in programming to let the program know
that a certain condition has met. It usually acts as a Boolean variable
indicating a condition to be either true or false.
Example 1 : Check if an array has any even number.
Input : arr[] = {1, 3, 7, 5}
Output : No
All numbers are odd.
Input : arr[] = {1, 2, 7, 5}
Output : Yes
There is one even number in the array.
We initialize a flag variable as false, then traverse the array. As soon as
we find an even element, we set flag as true and break the loop. Finally
we return flag.

6) Analyse time complexity of any one algorithm using step count method.
Answer-
Let us consider a simple linear search algorithm and analyse the time
complexity for it.
The code for linear search is – (considering that array and target element
is already provided)(n is the size of the array)
def linear_search(array1, target):
for i in array1:
if (i==target):
return array1.index(i)
return -1
Code Frequency
def linear_search(array1,target) 0
for i in array1: (n+1)
if (i==target): n
return array1.index(i) 1
return -1 1
T(n) = 0 + (n+1) + n + 1 + 1
Therefore T(n) = 2n + 3
So the time complexity of the algorithm in terms of Big Oh notation is
O(n) where n is the size of the array.

7) Discuss asymptotic notations with at least one example.
Answer-
The main idea of asymptotic analysis is to have a measure of the
efficiency of algorithms that don’t depend on machine-specific
constants.
Asymptotic notations are mathematical tools to represent the time
complexity of algorithms for asymptotic analysis.
The following 3 asymptotic notations are mostly used to represent the
time complexity of algorithms.
1: Big-Oh notation(O) – The Big-Oh notation describes the upper bound
of the algorithm. That is, it tells us the worst-case runtime for the
algorithm.
Example- T(n) = 3n2 + 2n + 6 = O(n2) in terms of Big-Oh notation.
2: Theta notation(Θ) – The Theta notation describes the average case
complexity of the algorithm.
Example- T(n) = 3n3 + 6n2 + 6000 = Θ(n3) in terms of theta notation.
3: Big-Omega notation(Ω) – The Big-Omega notation describes the lower
bound of the algorithm. That is, it tells us the best-case runtime for the
algorithm.
Example- Time complexity of all computer algorithms can be written as
Ω(1)

8) Elaborate the memory locations of an array elements with one example.
Answer-
Array elements are stored sequentially. If you know the base address of
the array then you can access any other element of the array because
they are stored sequentially in the memory.
Base address is nothing but the address of the first element of the array.
Example-
If our integer array A has five elements and base address is 1000 and
suppose the integer is taking four bytes of space in the memory then,
address of A[0]=1000 // base address of the array
address of A[1]=1004
address of A[2]=1008
address of A[3]=1012
address of A[4]=1016

9) Justify statement: At run time, I cannot add any element in an array.
Answer-
An array is a static data structure.
This means that once the program containing an array is compiled it
cannot be modified.
This also means that the array size remains fixed and it cannot increase
or decrease.
Hence at run time we cannot add any element in an array as it already
compiled hence no modification is possible.

10)Compare between static memory allocation and dynamic memory
allocation.
Answer-
Static memory allocation Dynamic memory allocation
1) No memory reusability. 1) Memory can be re-used and can be freed when not required.
2) Once the memory is
allocated the memory size
cannot change.
2) Even when memory is
allocated the memory size
can be changed.
3) Memory is allocated at
compile time.
3) Memory is allocated at
runtime.
4) It uses the stack for
memory allocation
4) It uses the heap for
memory allocation.
5) The execution is faster than
dynamic memory
allocation.
5) The execution is slower
than static memory
allocation.
